(*ElGamal Algorithm*)
p = 323170060713110073001535134778251633624880571334890751458843413926\
9806834136210002792056362640164685458556357935330816928829023080573472\
6252735547424612457410262025279165729728627063003252634282131457669314\
1422365422094111134862999165747826803423055308634905063555771221918789\
0332729569696129743856241741236237225197346402691855797767976823014625\
3979330580152268587307611975324364674758554607150438968449403661304976\
9781285429595865959756705128385213278446852292550456827287911372009893\
1873959143374175837826000278034973198552060607533234122603254684088120\
031105907484281003994966956119696956248629032338072839127039;
g = 2;

Print["Prime number p = ", p]
Print["Generator = ", g]

x = RandomInteger[{1, 10000}];
y = PowerMod[g, x, p];
k = RandomInteger[{1, 10000}];

Print["Random private key x = ", x]
Print["Public key y = ", y]
Print["Random value k = ", k]

encrypt[m_, p_, g_, k_, y_] := Module[{c1, c2},
  c1 = PowerMod[g, k, p];
  c2 = Mod[#*Power[y, k], p] & /@ m;
  {c1, c2}
  ]

decrypt[c1_, c2_, p_, x_] := Module[{m, c1Inverse},
  c1Inverse = PowerMod[c1, -x, p]; m = Mod[#*c1Inverse, p] & /@ c2;
  m
  ]

m = "Milena Cojuhari";
message = ToCharacterCode[m];
Print["Message: ", m, " to decimal: ", message]

{c1, c2} = encrypt[message, p, g, k, y];
Print["Encrypted message: "]
Print["c1 = ", c1]
Print["c2 = ", c2]

decryptedMessage = decrypt[c1, c2, p, x];
Print["Decrypted message: ", decryptedMessage, " to text: ", 
 FromCharacterCode[decryptedMessage]]
